#! /bin/env bash

# SPDX-License-Identifier: GPL-2.0-or-later
#
# (C) 2023 Alexander Seifarth
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @author: Alexander Seifarth (devel@titnc.de)

# repo_catalog_add <sname> <url> [<chksum>]
# @arg sname	Short name of the package. Must be unique in the repo, must not start with .
# @arg url	URL to download the package.
# @arg chksum	Checksum to verify package in form <type>:<sum>
#		Actual types:
#		- MD5
repo_catalog_add() {
	local sname="$1"
	local url="$2"
	local chksum="$3"

	local entry=$(repo_catalog_get "$sname")
	[[ $? -ne 0 ]] && { echo "FATAL: Package id invalid '$sname' or repo catalog defect." >&2; return 1; }
	[[ ! -z "$entry" ]] && { echo "Package '$sname' already in catalog." >&2; return 2; }
	case "$chksum" in
		MD5:* | 'none' )
			;;
		*)
			echo "ERROR: checksum '$chksum' of unknown format" >&2
			return 3
			;;
	esac
	echo "$sname $url $chksum" >> "$REPO_CATALOG"
}

# repo_catalog_rem <sname>
# @arg sname	Package short name to delete
repo_catalog_rem() {
	local sname="$1"
	repo_check_sname "$1" || return 1
	sed -i "/^$sname /d" "$REPO_CATALOG"
	return 0
}

# @arg sname	short name = id of the package
repo_catalog_get() {
	local sname="$1"
	repo_check_sname "$1" || return 1
	local matches="$(grep "^$sname " "$REPO_CATALOG")"
	[[ -z "$matches" ]] && return 0
	case $(echo "$matches" | wc -l) in
		1)
			echo "$matches"
			return 0
			;;
		*)
			echo "FATAL Multiple matches for package id "$sname". Repo inconsistent state!" >&2
			return 2
			;;
	esac
}

repo_catalog_import() {
	local impfile="$1"
	[[ ! -e "$impfile" ]] && { echo "FATAL: no such file '$impfile'" >&2; return 1; }

	cp -f "$REPO_CATALOG" "$REPO_CATALOG.bak"

	cat "$impfile" | \
	while read line; do
		line="$( echo "$line" | xargs )" # trim white spaces
		if [[ ! -z "$line" && "$line" != \#* ]]; then
			local pkg="$(echo $line | awk '{print $1}')"
			local url="$(echo $line | awk '{print $2}')"
			local chksm="$(echo $line | awk '{print $3}')"
			repo_catalog_add "$pkg" "$url" "$chksm" >&2
			if [[ $? -ne 0 ]]; then
				cp -f "$REPO_CATALOG.bak" "$REPO_CATALOG"
				echo "ERROR: aborted catalog import" >&2
				return 2
			fi
			echo "imported: $pkg" >&2
		fi
	done
}

# repo_get <sname>
# Outputs the path to the downloaded file or nothing.
# @arg sname	Package short name.
repo_get() {
	local sname="$1"
	local entry=$(repo_catalog_get "$sname")
	[[ -z "$entry" || $? -ne 0 ]] && { echo "No catalog entry for package '$sname'" >&2; return 1; }

	local url="$(echo "$entry" | awk '{print $2}')"
	local bn="$(basename "$url")"
	local filen="$sname:$bn"
	local chksm="$(echo "$entry" | awk '{print $3}')"

	if [[ ! -e "$filen" ]]; then
		repo_download "$url" "$filen" "$chksm"
		[[ $? -ne 0 ]] && { echo "Download for '$sname' from '$url' failed." >&2; return 2; }
	fi
	echo $(realpath $filen)
}


# repo_download <url> <path> <chksum>
repo_download() {
	local url="$1"
	local filep="$2"
	local chksm="$3"

	wget -O "$filep" "$url" >&2
	if [[ $? -ne 0 ]]; then
		[[ -e "$filep" ]] && rm -f "$filep"
		echo "ERROR: Failed to download '$url' with '$?'" >&2
		return 1
	fi

	case "$chksm" in
		MD5:*)
			local ist=$(md5sum "$filep" | awk '{print $1}')
			local soll=${chksm#MD5:}
			if [[ "$soll" != "$ist" ]]; then
				echo "ERROR: MD5 File checksum error." >&2
				rm -f "$filep"
				return 2
			fi
			;;
		'none' | *)
			;;
	esac
	return 0
}

repo_load() {
	local snames=$@

	if [[ -z "$snames" ]]; then
		snames="$(cat "$REPO_CATALOG" | awk '{print $1}')"
	fi

     	declare -A errors
	for pkg in $snames; do
		repo_get "$pkg"
		[[ $? -ne 0 ]] && errors["$pkg"]=$?
	done

	if [[ ${#errors[@]} -ne 0 ]]; then
		echo "ERRORs occured for the following packages" >&2
		echo "$errors" >&2
		return 1
	fi
	return 0
}

repo_check_sname() {
	local sname="$1"
	[[ "$sname" =~ '\ |\' ]] && { echo "package id '$sname' must not contain spaces." >&2; return 1; }
	[[ "$sname" != *:* ]] || { echo "package id '$sname' must not contain colons." >&2; return 1; }
	[[ "$sname" != .* ]] || { echo "package id '$sname' must not start with a dot." >&2; return 1; }
	return 0
}

# repo_find_root
# Echos the directory path of the repository.
repo_find_root() {
	local dir=$(realpath $(pwd))
	while [[ true ]]; do
		if [[ -d "$dir/$REPO_DIR_NAME" ]]; then
			if [[ -r "$dir/$REPO_DIR_NAME/$REPO_CATALOG" ]]; then
				echo "$dir/$REPO_DIR_NAME"
				return 0
			fi
		fi
		dir=$(realpath "$dir/..")
		if [[ $dir == "/" ]]; then
			return 1
		fi
	done
	return 1
}

# repo_init
# Initializes a file cache repo in the current directory
repo_init() {
	local import_catalog="$1"
	local upper=$(repo_find_root)
	if [[ ! -z "$upper" ]]; then
		echo "ERROR: There is already a file cache repository in $upper." >&2
		echo "       Nesting repositories is not supported." >&2
		return 1
	fi
	mkdir "$REPO_DIR_NAME" >&2 || { echo "FATAL: failed creating file cache repository"; return 2; }
	touch "$REPO_DIR_NAME/$REPO_CATALOG" >&2 || {
		echo "FATAL: failed creating catalog file";
		rm -rf "$REPO_DIR_NAME";
		return 3;
	}

	if [[ ! -z "$import_catalog" ]]; then
		local pwd=$(pwd)
		cd "$REPO_DIR_NAME"
		repo_catalog_import "$import_catalog"
		cd "$pwd"
	fi
}

REPO_DIR_NAME=".fcache"
REPO_CATALOG=".catalog"
REPO_LOCK_FILE=".lock"
REPO_LOCK_FD=100
REPO_REGISTRY=".registry"
IMPORT_FILE=

case "$1" in
	"init")
		[[ ! -z "$2" ]] && IMPORT_FILE="$(realpath "$2")"
		repo_init "$IMPORT_FILE" || exit 1
		exit 0
		;;
	"get-dir")
		repo_find_root
		echo $?
		exit 0
		;;
	"cat-import")
		IMPORT_FILE="$(realpath "$2")"
		;;
	*)
		;;
esac

REPO_DIR=$(repo_find_root)
[[ -z "$REPO_DIR" ]] && { echo "FATAL: Cannot find repository ($REPO_DIR_NAME)." >&2; exit 1; }
PWD=$(pwd)
cd "$REPO_DIR"

lock_file_fd=
exec {lock_file_fd}>"$REPO_LOCK_FILE"
flock -x -w 600 $lock_file_fd || { echo "FATAL: cannot get lock file" >&2; exit 2; }
trap "rm -f '$REPO_DIR/$REPO_LOCK_FILE'" EXIT

case "$1" in
	"cat-list")
		cat "$REPO_CATALOG"
		;;
	"cat-add")
		repo_catalog_add "$2" "$3" "$4"
		;;
	"cat-rem")
		repo_catalog_rem "$2"
		;;
	"cat-get")
		repo_catalog_get "$2"
		;;
	"cat-import")
		repo_catalog_import "$IMPORT_FILE"
		;;
	"get")
		repo_get "$2"
		;;
	"load")
		repo_load "${@:2}"
		;;
	*)
		echo "Unknown command '$1'."
		exit 3
		;;
esac

cd "$PWD"

